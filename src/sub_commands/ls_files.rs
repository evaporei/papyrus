use crate::fs::{FileSystem, Fs};
use crypto::digest::Digest;
use crypto::sha1::Sha1;
use std::convert::TryInto;

#[derive(Default, PartialEq)]
struct IndexEntry {
    ctime_s: [u8; 4],
    ctime_n: [u8; 4],
    mtime_s: [u8; 4],
    mtime_n: [u8; 4],
    dev: [u8; 4],
    ino: [u8; 4],
    mode: [u8; 4],
    uid: [u8; 4],
    gid: [u8; 4],
    size: [u8; 4],
    sha1: [u8; 20],
    flags: [u8; 2],
    path: Vec<u8>,
}

pub fn execute(fs: &FileSystem, stage: bool) -> Result<String, String> {
    let index_path = format!("{}/.papyrus/index", fs.current_directory());

    if !fs.path_exists(&index_path) {
        return Ok("".to_string());
    }

    let index_content = fs.get_file_contents_as_bytes(&index_path.into()).unwrap();

    let entries = parse_index_file_content(&index_content)?;

    Ok(format_index_entries(entries, stage))
}

fn parse_index_file_content(index_content: &[u8]) -> Result<Vec<IndexEntry>, String> {
    let header = &index_content[..12];

    let signature = &header[..4];
    // sanity check of signature
    if signature != b"DIRC" {
        return Err("error: bad signature\nfatal: index file corrupt".to_string());
    }

    let version = &header[4..8];
    // sanity check of version
    if version != &[0, 0, 0, 2] {
        return Err("error: bad version\nfatal: index file corrupt".to_string());
    }

    let number_of_entries = &header[8..12];

    let mut hasher = Sha1::new();
    let index_of_checksum = index_content.len() - 20;
    hasher.input(&index_content[..index_of_checksum]);
    let size = hasher.output_bytes();
    let mut sha1_bytes = vec![0; size];
    hasher.result(&mut sha1_bytes);

    let checksum: Vec<u8> = index_content
        .iter()
        .rev()
        .take(20)
        .rev()
        .map(|a| *a)
        .collect();

    // sanity check of checksum
    if sha1_bytes != checksum {
        return Err("error: bad index file sha1 signature\nfatal: index file corrupt".to_string());
    }

    let entry_data = &index_content[12..index_of_checksum];
    let quantity = u32::from_be_bytes(number_of_entries.try_into().unwrap());
    let mut entries: Vec<IndexEntry> = vec![];
    let mut i = 0;
    let mut count = 1;

    while i + 62 < entry_data.len() && count <= quantity {
        count += 1;
        let fields_end = i + 62;
        let fields = &entry_data[i..fields_end];
        let path_end = entry_data
            .iter()
            .skip(fields_end)
            .position(|a| *a == b'\x00')
            .unwrap()
            + fields_end;
        let path = &entry_data[fields_end..path_end];

        let mut entry = IndexEntry::default();

        entry.ctime_s.copy_from_slice(&fields[..4]);
        entry.ctime_n.copy_from_slice(&fields[4..8]);
        entry.mtime_s.copy_from_slice(&fields[8..12]);
        entry.mtime_n.copy_from_slice(&fields[12..16]);
        entry.dev.copy_from_slice(&fields[16..20]);
        entry.ino.copy_from_slice(&fields[20..24]);
        entry.mode.copy_from_slice(&fields[24..28]);
        entry.uid.copy_from_slice(&fields[28..32]);
        entry.gid.copy_from_slice(&fields[32..36]);
        entry.size.copy_from_slice(&fields[36..40]);

        entry.sha1.copy_from_slice(&fields[40..60]);
        entry.flags.copy_from_slice(&fields[60..62]);

        for p in path {
            entry.path.push(*p);
        }

        entries.push(entry);

        let entry_length = ((62 + path.len() + 8) / 8) * 8;
        i += entry_length;
    }

    Ok(entries)
}

fn format_index_entries(entries: Vec<IndexEntry>, stage: bool) -> String {
    let mut output = String::new();

    for entry in &entries {
        if stage {
            let flags = u16::from_be_bytes(entry.flags.try_into().unwrap());
            let stage = (flags >> 12) & 3;

            let mode = u32::from_be_bytes(entry.mode.try_into().unwrap());
            output.push_str(&format!("{:o} ", mode));

            for s in entry.sha1.iter() {
                output.push_str(&format!("{:02x}", s));
            }

            output.push_str(&format!(" {:?}\t", stage));
        }

        let path = std::str::from_utf8(&entry.path).unwrap();
        output.push_str(&format!("{}", path));

        if let Some(last) = entries.last() {
            if last != entry {
                output.push_str("\n");
            }
        }
    }

    output
}

#[test]
fn test_execute_bad_checksum_sha1_signature() {
    let mut fs = FileSystem::access();

    fs.create_file(&format!("{}/.papyrus/index", fs.current_directory()));
    fs.write_file(
        &format!("{}/.papyrus/index", fs.current_directory()),
        &[
            68, 73, 82, 67, 0, 0, 0, 2, 0, 0, 0, 15, 94, 132, 13, 113, 13, 184, 180, 103, 94, 132,
            13, 113, 13, 183, 115, 50, 1, 0, 0, 4, 1, 12, 85, 214, 0, 0, 129, 164, 0, 0, 1, 245, 0,
            0, 0, 20, 0, 0, 0, 28, 52, 220, 64, 192, 79, 110, 150, 232, 165, 77, 74, 43, 155, 192,
            91, 102, 255, 146, 212, 148, 0, 10, 46, 103, 105, 116, 105, 103, 110, 111, 114, 101, 0,
            0, 0, 0, 0, 0, 0, 0, 94, 177, 34, 250, 5, 252, 82, 81, 94, 177, 34, 250, 5, 252, 82,
            81, 1, 0, 0, 4, 1, 6, 21, 137, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 66,
            212, 23, 32, 220, 206, 3, 11, 166, 54, 145, 202, 239, 206, 148, 207, 142, 114, 189,
            201, 162, 95, 0, 10, 67, 97, 114, 103, 111, 46, 108, 111, 99, 107, 0, 0, 0, 0, 0, 0, 0,
            0, 94, 177, 34, 243, 20, 138, 105, 112, 94, 177, 34, 243, 20, 137, 109, 228, 1, 0, 0,
            4, 1, 41, 141, 186, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 1, 23, 22, 168,
            14, 57, 131, 236, 189, 112, 58, 63, 67, 88, 88, 140, 254, 8, 213, 33, 154, 44, 0, 10,
            67, 97, 114, 103, 111, 46, 116, 111, 109, 108, 0, 0, 0, 0, 0, 0, 0, 0, 94, 120, 31, 1,
            34, 142, 95, 164, 94, 120, 31, 1, 34, 140, 125, 53, 1, 0, 0, 4, 1, 4, 118, 86, 0, 0,
            129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 0, 182, 252, 161, 136, 193, 255, 196, 60,
            248, 188, 144, 96, 52, 26, 55, 133, 58, 119, 249, 109, 44, 0, 9, 82, 69, 65, 68, 77,
            69, 46, 109, 100, 0, 94, 121, 120, 249, 56, 110, 121, 161, 94, 121, 120, 249, 56, 110,
            121, 161, 1, 0, 0, 4, 1, 6, 26, 133, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0,
            6, 70, 172, 176, 119, 44, 78, 15, 182, 253, 115, 91, 175, 96, 138, 82, 133, 74, 73,
            113, 210, 168, 0, 14, 110, 111, 116, 101, 115, 47, 116, 101, 114, 109, 115, 46, 109,
            100, 0, 0, 0, 0, 94, 147, 116, 24, 14, 34, 213, 173, 94, 147, 116, 24, 14, 34, 213,
            173, 1, 0, 0, 4, 1, 21, 71, 22, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 12,
            109, 13, 243, 163, 194, 212, 90, 195, 187, 221, 147, 239, 90, 220, 69, 67, 187, 208,
            134, 156, 10, 0, 14, 115, 114, 99, 47, 102, 115, 47, 102, 97, 107, 101, 46, 114, 115,
            0, 0, 0, 0, 94, 147, 116, 24, 14, 50, 175, 202, 94, 147, 116, 24, 14, 50, 175, 202, 1,
            0, 0, 4, 1, 21, 71, 23, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 3, 219, 208,
            178, 42, 76, 7, 146, 74, 1, 120, 22, 85, 77, 44, 44, 182, 146, 211, 69, 128, 67, 0, 13,
            115, 114, 99, 47, 102, 115, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 0, 0, 94, 147,
            116, 24, 14, 78, 88, 30, 94, 147, 116, 24, 14, 78, 88, 30, 1, 0, 0, 4, 1, 21, 71, 24,
            0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 9, 62, 90, 253, 18, 24, 182, 216, 78,
            95, 151, 80, 81, 220, 25, 18, 193, 130, 173, 239, 182, 78, 0, 14, 115, 114, 99, 47,
            102, 115, 47, 114, 101, 97, 108, 46, 114, 115, 0, 0, 0, 0, 94, 124, 32, 189, 2, 137,
            49, 196, 94, 124, 32, 189, 2, 135, 163, 182, 1, 0, 0, 4, 1, 8, 113, 92, 0, 0, 129, 164,
            0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 0, 34, 165, 133, 59, 29, 162, 218, 108, 53, 180, 38,
            158, 18, 209, 55, 34, 209, 76, 34, 142, 212, 0, 10, 115, 114, 99, 47, 108, 105, 98, 46,
            114, 115, 0, 0, 0, 0, 0, 0, 0, 0, 94, 177, 34, 240, 22, 255, 120, 120, 94, 177, 34,
            240, 22, 254, 86, 47, 1, 0, 0, 4, 1, 41, 141, 175, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0,
            0, 20, 0, 0, 0, 246, 43, 184, 200, 5, 208, 91, 107, 82, 210, 22, 139, 64, 44, 107, 73,
            195, 183, 153, 202, 235, 0, 11, 115, 114, 99, 47, 109, 97, 105, 110, 46, 114, 115, 0,
            0, 0, 0, 0, 0, 0, 94, 167, 139, 6, 59, 139, 54, 221, 94, 167, 139, 6, 59, 139, 54, 221,
            1, 0, 0, 4, 1, 35, 14, 204, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 17, 58,
            177, 88, 100, 254, 156, 13, 114, 33, 178, 146, 3, 14, 37, 209, 115, 142, 213, 4, 204,
            85, 0, 28, 115, 114, 99, 47, 115, 117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115,
            47, 99, 97, 116, 95, 102, 105, 108, 101, 46, 114, 115, 0, 0, 0, 0, 0, 0, 94, 177, 24,
            122, 13, 192, 34, 95, 94, 177, 24, 122, 13, 191, 2, 11, 1, 0, 0, 4, 1, 41, 99, 236, 0,
            0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 13, 149, 210, 45, 151, 69, 45, 168, 142,
            245, 139, 21, 187, 12, 0, 19, 193, 137, 224, 15, 75, 236, 0, 31, 115, 114, 99, 47, 115,
            117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115, 47, 104, 97, 115, 104, 95, 111, 98,
            106, 101, 99, 116, 46, 114, 115, 0, 0, 0, 94, 133, 108, 131, 1, 109, 17, 236, 94, 133,
            108, 131, 1, 109, 17, 236, 1, 0, 0, 4, 1, 12, 55, 255, 0, 0, 129, 164, 0, 0, 1, 245, 0,
            0, 0, 20, 0, 0, 6, 12, 11, 87, 38, 3, 124, 243, 56, 33, 75, 16, 235, 89, 6, 114, 9,
            199, 91, 163, 214, 140, 0, 24, 115, 114, 99, 47, 115, 117, 98, 95, 99, 111, 109, 109,
            97, 110, 100, 115, 47, 105, 110, 105, 116, 46, 114, 115, 0, 0, 94, 179, 137, 220, 37,
            206, 41, 26, 94, 179, 137, 220, 37, 204, 202, 57, 1, 0, 0, 4, 1, 43, 110, 235, 0, 0,
            129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 14, 108, 106, 235, 124, 210, 1, 128, 248,
            226, 58, 31, 83, 243, 219, 200, 99, 175, 55, 189, 200, 14, 0, 28, 115, 114, 99, 47,
            115, 117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115, 47, 108, 115, 95, 102, 105,
            108, 101, 115, 46, 114, 115, 0, 0, 0, 0, 0, 0, 94, 177, 19, 118, 26, 86, 89, 11, 94,
            177, 19, 118, 26, 85, 6, 54, 1, 0, 0, 4, 1, 41, 78, 74, 0, 0, 129, 164, 0, 0, 1, 245,
            0, 0, 0, 20, 0, 0, 5, 149, 154, 29, 159, 105, 4, 126, 153, 28, 5, 25, 182, 117, 41, 25,
            176, 127, 166, 48, 116, 18, 0, 23, 115, 114, 99, 47, 115, 117, 98, 95, 99, 111, 109,
            109, 97, 110, 100, 115, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 84, 82, 69, 69, 0, 0,
            0, 149, 0, 49, 53, 32, 50, 10, 103, 180, 27, 92, 58, 38, 85, 114, 220, 226, 35, 113,
            139, 184, 199, 206, 225, 237, 26, 137, 115, 114, 99, 0, 49, 48, 32, 50, 10, 134, 252,
            110, 171, 250, 244, 65, 96, 75, 213, 174, 196, 239, 25, 179, 84, 40, 46, 101, 27, 102,
            115, 0, 51, 32, 48, 10, 16, 165, 103, 157, 70, 15, 210, 39, 8, 228, 185, 233, 153, 227,
            251, 130, 190, 249, 245, 192, 115, 117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115,
            0, 53, 32, 48, 10, 45, 32, 0, 59, 51, 212, 91, 147, 102, 84, 56, 250, 169, 189, 157,
            194, 36, 201, 201, 76, 110, 111, 116, 101, 115, 0, 49, 32, 48, 10, 92, 152, 245, 148,
            29, 66, 152, 52, 242, 246, 26, 19, 111, 67, 146, 244, 170, 71, 20, 217, 170, 177, 16,
            179, 198, 230, 17, 91, 73, 158, 102, 213, 130, 144, 26, 91, 90, 53, 64, 69,
        ],
    );

    assert_eq!(
        execute(&fs, false).unwrap_err(),
        "error: bad index file sha1 signature\nfatal: index file corrupt"
    );
}

#[test]
fn test_execute_bad_signature() {
    let mut fs = FileSystem::access();

    fs.create_file(&format!("{}/.papyrus/index", fs.current_directory()));
    fs.write_file(
        &format!("{}/.papyrus/index", fs.current_directory()),
        &[
            68, 69, 82, 67, 0, 0, 0, 2, 0, 0, 0, 15, 94, 132, 13, 113, 13, 184, 180, 103, 94, 132,
            13, 113, 13, 183, 115, 50, 1, 0, 0, 4, 1, 12, 85, 214, 0, 0, 129, 164, 0, 0, 1, 245, 0,
            0, 0, 20, 0, 0, 0, 28, 52, 220, 64, 192, 79, 110, 150, 232, 165, 77, 74, 43, 155, 192,
            91, 102, 255, 146, 212, 148, 0, 10, 46, 103, 105, 116, 105, 103, 110, 111, 114, 101, 0,
            0, 0, 0, 0, 0, 0, 0, 94, 177, 34, 250, 5, 252, 82, 81, 94, 177, 34, 250, 5, 252, 82,
            81, 1, 0, 0, 4, 1, 6, 21, 137, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 66,
            212, 23, 32, 220, 206, 3, 11, 166, 54, 145, 202, 239, 206, 148, 207, 142, 114, 189,
            201, 162, 95, 0, 10, 67, 97, 114, 103, 111, 46, 108, 111, 99, 107, 0, 0, 0, 0, 0, 0, 0,
            0, 94, 177, 34, 243, 20, 138, 105, 112, 94, 177, 34, 243, 20, 137, 109, 228, 1, 0, 0,
            4, 1, 41, 141, 186, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 1, 23, 22, 168,
            14, 57, 131, 236, 189, 112, 58, 63, 67, 88, 88, 140, 254, 8, 213, 33, 154, 44, 0, 10,
            67, 97, 114, 103, 111, 46, 116, 111, 109, 108, 0, 0, 0, 0, 0, 0, 0, 0, 94, 120, 31, 1,
            34, 142, 95, 164, 94, 120, 31, 1, 34, 140, 125, 53, 1, 0, 0, 4, 1, 4, 118, 86, 0, 0,
            129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 0, 182, 252, 161, 136, 193, 255, 196, 60,
            248, 188, 144, 96, 52, 26, 55, 133, 58, 119, 249, 109, 44, 0, 9, 82, 69, 65, 68, 77,
            69, 46, 109, 100, 0, 94, 121, 120, 249, 56, 110, 121, 161, 94, 121, 120, 249, 56, 110,
            121, 161, 1, 0, 0, 4, 1, 6, 26, 133, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0,
            6, 70, 172, 176, 119, 44, 78, 15, 182, 253, 115, 91, 175, 96, 138, 82, 133, 74, 73,
            113, 210, 168, 0, 14, 110, 111, 116, 101, 115, 47, 116, 101, 114, 109, 115, 46, 109,
            100, 0, 0, 0, 0, 94, 147, 116, 24, 14, 34, 213, 173, 94, 147, 116, 24, 14, 34, 213,
            173, 1, 0, 0, 4, 1, 21, 71, 22, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 12,
            109, 13, 243, 163, 194, 212, 90, 195, 187, 221, 147, 239, 90, 220, 69, 67, 187, 208,
            134, 156, 10, 0, 14, 115, 114, 99, 47, 102, 115, 47, 102, 97, 107, 101, 46, 114, 115,
            0, 0, 0, 0, 94, 147, 116, 24, 14, 50, 175, 202, 94, 147, 116, 24, 14, 50, 175, 202, 1,
            0, 0, 4, 1, 21, 71, 23, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 3, 219, 208,
            178, 42, 76, 7, 146, 74, 1, 120, 22, 85, 77, 44, 44, 182, 146, 211, 69, 128, 67, 0, 13,
            115, 114, 99, 47, 102, 115, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 0, 0, 94, 147,
            116, 24, 14, 78, 88, 30, 94, 147, 116, 24, 14, 78, 88, 30, 1, 0, 0, 4, 1, 21, 71, 24,
            0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 9, 62, 90, 253, 18, 24, 182, 216, 78,
            95, 151, 80, 81, 220, 25, 18, 193, 130, 173, 239, 182, 78, 0, 14, 115, 114, 99, 47,
            102, 115, 47, 114, 101, 97, 108, 46, 114, 115, 0, 0, 0, 0, 94, 124, 32, 189, 2, 137,
            49, 196, 94, 124, 32, 189, 2, 135, 163, 182, 1, 0, 0, 4, 1, 8, 113, 92, 0, 0, 129, 164,
            0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 0, 34, 165, 133, 59, 29, 162, 218, 108, 53, 180, 38,
            158, 18, 209, 55, 34, 209, 76, 34, 142, 212, 0, 10, 115, 114, 99, 47, 108, 105, 98, 46,
            114, 115, 0, 0, 0, 0, 0, 0, 0, 0, 94, 177, 34, 240, 22, 255, 120, 120, 94, 177, 34,
            240, 22, 254, 86, 47, 1, 0, 0, 4, 1, 41, 141, 175, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0,
            0, 20, 0, 0, 0, 246, 43, 184, 200, 5, 208, 91, 107, 82, 210, 22, 139, 64, 44, 107, 73,
            195, 183, 153, 202, 235, 0, 11, 115, 114, 99, 47, 109, 97, 105, 110, 46, 114, 115, 0,
            0, 0, 0, 0, 0, 0, 94, 167, 139, 6, 59, 139, 54, 221, 94, 167, 139, 6, 59, 139, 54, 221,
            1, 0, 0, 4, 1, 35, 14, 204, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 17, 58,
            177, 88, 100, 254, 156, 13, 114, 33, 178, 146, 3, 14, 37, 209, 115, 142, 213, 4, 204,
            85, 0, 28, 115, 114, 99, 47, 115, 117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115,
            47, 99, 97, 116, 95, 102, 105, 108, 101, 46, 114, 115, 0, 0, 0, 0, 0, 0, 94, 177, 24,
            122, 13, 192, 34, 95, 94, 177, 24, 122, 13, 191, 2, 11, 1, 0, 0, 4, 1, 41, 99, 236, 0,
            0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 13, 149, 210, 45, 151, 69, 45, 168, 142,
            245, 139, 21, 187, 12, 0, 19, 193, 137, 224, 15, 75, 236, 0, 31, 115, 114, 99, 47, 115,
            117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115, 47, 104, 97, 115, 104, 95, 111, 98,
            106, 101, 99, 116, 46, 114, 115, 0, 0, 0, 94, 133, 108, 131, 1, 109, 17, 236, 94, 133,
            108, 131, 1, 109, 17, 236, 1, 0, 0, 4, 1, 12, 55, 255, 0, 0, 129, 164, 0, 0, 1, 245, 0,
            0, 0, 20, 0, 0, 6, 12, 11, 87, 38, 3, 124, 243, 56, 33, 75, 16, 235, 89, 6, 114, 9,
            199, 91, 163, 214, 140, 0, 24, 115, 114, 99, 47, 115, 117, 98, 95, 99, 111, 109, 109,
            97, 110, 100, 115, 47, 105, 110, 105, 116, 46, 114, 115, 0, 0, 94, 179, 137, 220, 37,
            206, 41, 26, 94, 179, 137, 220, 37, 204, 202, 57, 1, 0, 0, 4, 1, 43, 110, 235, 0, 0,
            129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 14, 108, 106, 235, 124, 210, 1, 128, 248,
            226, 58, 31, 83, 243, 219, 200, 99, 175, 55, 189, 200, 14, 0, 28, 115, 114, 99, 47,
            115, 117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115, 47, 108, 115, 95, 102, 105,
            108, 101, 115, 46, 114, 115, 0, 0, 0, 0, 0, 0, 94, 177, 19, 118, 26, 86, 89, 11, 94,
            177, 19, 118, 26, 85, 6, 54, 1, 0, 0, 4, 1, 41, 78, 74, 0, 0, 129, 164, 0, 0, 1, 245,
            0, 0, 0, 20, 0, 0, 5, 149, 154, 29, 159, 105, 4, 126, 153, 28, 5, 25, 182, 117, 41, 25,
            176, 127, 166, 48, 116, 18, 0, 23, 115, 114, 99, 47, 115, 117, 98, 95, 99, 111, 109,
            109, 97, 110, 100, 115, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 84, 82, 69, 69, 0, 0,
            0, 149, 0, 49, 53, 32, 50, 10, 103, 180, 27, 92, 58, 38, 85, 114, 220, 226, 35, 113,
            139, 184, 199, 206, 225, 237, 26, 137, 115, 114, 99, 0, 49, 48, 32, 50, 10, 134, 252,
            110, 171, 250, 244, 65, 96, 75, 213, 174, 196, 239, 25, 179, 84, 40, 46, 101, 27, 102,
            115, 0, 51, 32, 48, 10, 16, 165, 103, 157, 70, 15, 210, 39, 8, 228, 185, 233, 153, 227,
            251, 130, 190, 249, 245, 192, 115, 117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115,
            0, 53, 32, 48, 10, 45, 32, 0, 59, 51, 212, 91, 147, 102, 84, 56, 250, 169, 189, 157,
            194, 36, 201, 201, 76, 110, 111, 116, 101, 115, 0, 49, 32, 48, 10, 92, 152, 245, 148,
            29, 66, 152, 52, 242, 246, 26, 19, 111, 67, 146, 244, 170, 71, 20, 217, 170, 177, 16,
            179, 198, 230, 17, 91, 73, 158, 102, 213, 130, 144, 26, 91, 90, 53, 64, 90,
        ],
    );

    assert_eq!(
        execute(&fs, false).unwrap_err(),
        "error: bad signature\nfatal: index file corrupt"
    );
}

#[test]
fn test_execute_bad_version() {
    let mut fs = FileSystem::access();

    fs.create_file(&format!("{}/.papyrus/index", fs.current_directory()));
    fs.write_file(
        &format!("{}/.papyrus/index", fs.current_directory()),
        &[
            68, 73, 82, 67, 0, 0, 0, 69, 0, 0, 0, 15, 94, 132, 13, 113, 13, 184, 180, 103, 94, 132,
            13, 113, 13, 183, 115, 50, 1, 0, 0, 4, 1, 12, 85, 214, 0, 0, 129, 164, 0, 0, 1, 245, 0,
            0, 0, 20, 0, 0, 0, 28, 52, 220, 64, 192, 79, 110, 150, 232, 165, 77, 74, 43, 155, 192,
            91, 102, 255, 146, 212, 148, 0, 10, 46, 103, 105, 116, 105, 103, 110, 111, 114, 101, 0,
            0, 0, 0, 0, 0, 0, 0, 94, 177, 34, 250, 5, 252, 82, 81, 94, 177, 34, 250, 5, 252, 82,
            81, 1, 0, 0, 4, 1, 6, 21, 137, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 66,
            212, 23, 32, 220, 206, 3, 11, 166, 54, 145, 202, 239, 206, 148, 207, 142, 114, 189,
            201, 162, 95, 0, 10, 67, 97, 114, 103, 111, 46, 108, 111, 99, 107, 0, 0, 0, 0, 0, 0, 0,
            0, 94, 177, 34, 243, 20, 138, 105, 112, 94, 177, 34, 243, 20, 137, 109, 228, 1, 0, 0,
            4, 1, 41, 141, 186, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 1, 23, 22, 168,
            14, 57, 131, 236, 189, 112, 58, 63, 67, 88, 88, 140, 254, 8, 213, 33, 154, 44, 0, 10,
            67, 97, 114, 103, 111, 46, 116, 111, 109, 108, 0, 0, 0, 0, 0, 0, 0, 0, 94, 120, 31, 1,
            34, 142, 95, 164, 94, 120, 31, 1, 34, 140, 125, 53, 1, 0, 0, 4, 1, 4, 118, 86, 0, 0,
            129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 0, 182, 252, 161, 136, 193, 255, 196, 60,
            248, 188, 144, 96, 52, 26, 55, 133, 58, 119, 249, 109, 44, 0, 9, 82, 69, 65, 68, 77,
            69, 46, 109, 100, 0, 94, 121, 120, 249, 56, 110, 121, 161, 94, 121, 120, 249, 56, 110,
            121, 161, 1, 0, 0, 4, 1, 6, 26, 133, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0,
            6, 70, 172, 176, 119, 44, 78, 15, 182, 253, 115, 91, 175, 96, 138, 82, 133, 74, 73,
            113, 210, 168, 0, 14, 110, 111, 116, 101, 115, 47, 116, 101, 114, 109, 115, 46, 109,
            100, 0, 0, 0, 0, 94, 147, 116, 24, 14, 34, 213, 173, 94, 147, 116, 24, 14, 34, 213,
            173, 1, 0, 0, 4, 1, 21, 71, 22, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 12,
            109, 13, 243, 163, 194, 212, 90, 195, 187, 221, 147, 239, 90, 220, 69, 67, 187, 208,
            134, 156, 10, 0, 14, 115, 114, 99, 47, 102, 115, 47, 102, 97, 107, 101, 46, 114, 115,
            0, 0, 0, 0, 94, 147, 116, 24, 14, 50, 175, 202, 94, 147, 116, 24, 14, 50, 175, 202, 1,
            0, 0, 4, 1, 21, 71, 23, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 3, 219, 208,
            178, 42, 76, 7, 146, 74, 1, 120, 22, 85, 77, 44, 44, 182, 146, 211, 69, 128, 67, 0, 13,
            115, 114, 99, 47, 102, 115, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 0, 0, 94, 147,
            116, 24, 14, 78, 88, 30, 94, 147, 116, 24, 14, 78, 88, 30, 1, 0, 0, 4, 1, 21, 71, 24,
            0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 9, 62, 90, 253, 18, 24, 182, 216, 78,
            95, 151, 80, 81, 220, 25, 18, 193, 130, 173, 239, 182, 78, 0, 14, 115, 114, 99, 47,
            102, 115, 47, 114, 101, 97, 108, 46, 114, 115, 0, 0, 0, 0, 94, 124, 32, 189, 2, 137,
            49, 196, 94, 124, 32, 189, 2, 135, 163, 182, 1, 0, 0, 4, 1, 8, 113, 92, 0, 0, 129, 164,
            0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 0, 34, 165, 133, 59, 29, 162, 218, 108, 53, 180, 38,
            158, 18, 209, 55, 34, 209, 76, 34, 142, 212, 0, 10, 115, 114, 99, 47, 108, 105, 98, 46,
            114, 115, 0, 0, 0, 0, 0, 0, 0, 0, 94, 177, 34, 240, 22, 255, 120, 120, 94, 177, 34,
            240, 22, 254, 86, 47, 1, 0, 0, 4, 1, 41, 141, 175, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0,
            0, 20, 0, 0, 0, 246, 43, 184, 200, 5, 208, 91, 107, 82, 210, 22, 139, 64, 44, 107, 73,
            195, 183, 153, 202, 235, 0, 11, 115, 114, 99, 47, 109, 97, 105, 110, 46, 114, 115, 0,
            0, 0, 0, 0, 0, 0, 94, 167, 139, 6, 59, 139, 54, 221, 94, 167, 139, 6, 59, 139, 54, 221,
            1, 0, 0, 4, 1, 35, 14, 204, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 17, 58,
            177, 88, 100, 254, 156, 13, 114, 33, 178, 146, 3, 14, 37, 209, 115, 142, 213, 4, 204,
            85, 0, 28, 115, 114, 99, 47, 115, 117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115,
            47, 99, 97, 116, 95, 102, 105, 108, 101, 46, 114, 115, 0, 0, 0, 0, 0, 0, 94, 177, 24,
            122, 13, 192, 34, 95, 94, 177, 24, 122, 13, 191, 2, 11, 1, 0, 0, 4, 1, 41, 99, 236, 0,
            0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 13, 149, 210, 45, 151, 69, 45, 168, 142,
            245, 139, 21, 187, 12, 0, 19, 193, 137, 224, 15, 75, 236, 0, 31, 115, 114, 99, 47, 115,
            117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115, 47, 104, 97, 115, 104, 95, 111, 98,
            106, 101, 99, 116, 46, 114, 115, 0, 0, 0, 94, 133, 108, 131, 1, 109, 17, 236, 94, 133,
            108, 131, 1, 109, 17, 236, 1, 0, 0, 4, 1, 12, 55, 255, 0, 0, 129, 164, 0, 0, 1, 245, 0,
            0, 0, 20, 0, 0, 6, 12, 11, 87, 38, 3, 124, 243, 56, 33, 75, 16, 235, 89, 6, 114, 9,
            199, 91, 163, 214, 140, 0, 24, 115, 114, 99, 47, 115, 117, 98, 95, 99, 111, 109, 109,
            97, 110, 100, 115, 47, 105, 110, 105, 116, 46, 114, 115, 0, 0, 94, 179, 137, 220, 37,
            206, 41, 26, 94, 179, 137, 220, 37, 204, 202, 57, 1, 0, 0, 4, 1, 43, 110, 235, 0, 0,
            129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 14, 108, 106, 235, 124, 210, 1, 128, 248,
            226, 58, 31, 83, 243, 219, 200, 99, 175, 55, 189, 200, 14, 0, 28, 115, 114, 99, 47,
            115, 117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115, 47, 108, 115, 95, 102, 105,
            108, 101, 115, 46, 114, 115, 0, 0, 0, 0, 0, 0, 94, 177, 19, 118, 26, 86, 89, 11, 94,
            177, 19, 118, 26, 85, 6, 54, 1, 0, 0, 4, 1, 41, 78, 74, 0, 0, 129, 164, 0, 0, 1, 245,
            0, 0, 0, 20, 0, 0, 5, 149, 154, 29, 159, 105, 4, 126, 153, 28, 5, 25, 182, 117, 41, 25,
            176, 127, 166, 48, 116, 18, 0, 23, 115, 114, 99, 47, 115, 117, 98, 95, 99, 111, 109,
            109, 97, 110, 100, 115, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 84, 82, 69, 69, 0, 0,
            0, 149, 0, 49, 53, 32, 50, 10, 103, 180, 27, 92, 58, 38, 85, 114, 220, 226, 35, 113,
            139, 184, 199, 206, 225, 237, 26, 137, 115, 114, 99, 0, 49, 48, 32, 50, 10, 134, 252,
            110, 171, 250, 244, 65, 96, 75, 213, 174, 196, 239, 25, 179, 84, 40, 46, 101, 27, 102,
            115, 0, 51, 32, 48, 10, 16, 165, 103, 157, 70, 15, 210, 39, 8, 228, 185, 233, 153, 227,
            251, 130, 190, 249, 245, 192, 115, 117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115,
            0, 53, 32, 48, 10, 45, 32, 0, 59, 51, 212, 91, 147, 102, 84, 56, 250, 169, 189, 157,
            194, 36, 201, 201, 76, 110, 111, 116, 101, 115, 0, 49, 32, 48, 10, 92, 152, 245, 148,
            29, 66, 152, 52, 242, 246, 26, 19, 111, 67, 146, 244, 170, 71, 20, 217, 170, 177, 16,
            179, 198, 230, 17, 91, 73, 158, 102, 213, 130, 144, 26, 91, 90, 53, 64, 90,
        ],
    );

    assert_eq!(
        execute(&fs, false).unwrap_err(),
        "error: bad version\nfatal: index file corrupt"
    );
}

#[test]
fn test_execute_good1_no_stage() {
    let mut fs = FileSystem::access();

    fs.create_file(&format!("{}/.papyrus/index", fs.current_directory()));
    fs.write_file(
        &format!("{}/.papyrus/index", fs.current_directory()),
        &[
            68, 73, 82, 67, 0, 0, 0, 2, 0, 0, 0, 15, 94, 132, 13, 113, 13, 184, 180, 103, 94, 132,
            13, 113, 13, 183, 115, 50, 1, 0, 0, 4, 1, 12, 85, 214, 0, 0, 129, 164, 0, 0, 1, 245, 0,
            0, 0, 20, 0, 0, 0, 28, 52, 220, 64, 192, 79, 110, 150, 232, 165, 77, 74, 43, 155, 192,
            91, 102, 255, 146, 212, 148, 0, 10, 46, 103, 105, 116, 105, 103, 110, 111, 114, 101, 0,
            0, 0, 0, 0, 0, 0, 0, 94, 177, 34, 250, 5, 252, 82, 81, 94, 177, 34, 250, 5, 252, 82,
            81, 1, 0, 0, 4, 1, 6, 21, 137, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 66,
            212, 23, 32, 220, 206, 3, 11, 166, 54, 145, 202, 239, 206, 148, 207, 142, 114, 189,
            201, 162, 95, 0, 10, 67, 97, 114, 103, 111, 46, 108, 111, 99, 107, 0, 0, 0, 0, 0, 0, 0,
            0, 94, 177, 34, 243, 20, 138, 105, 112, 94, 177, 34, 243, 20, 137, 109, 228, 1, 0, 0,
            4, 1, 41, 141, 186, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 1, 23, 22, 168,
            14, 57, 131, 236, 189, 112, 58, 63, 67, 88, 88, 140, 254, 8, 213, 33, 154, 44, 0, 10,
            67, 97, 114, 103, 111, 46, 116, 111, 109, 108, 0, 0, 0, 0, 0, 0, 0, 0, 94, 120, 31, 1,
            34, 142, 95, 164, 94, 120, 31, 1, 34, 140, 125, 53, 1, 0, 0, 4, 1, 4, 118, 86, 0, 0,
            129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 0, 182, 252, 161, 136, 193, 255, 196, 60,
            248, 188, 144, 96, 52, 26, 55, 133, 58, 119, 249, 109, 44, 0, 9, 82, 69, 65, 68, 77,
            69, 46, 109, 100, 0, 94, 121, 120, 249, 56, 110, 121, 161, 94, 121, 120, 249, 56, 110,
            121, 161, 1, 0, 0, 4, 1, 6, 26, 133, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0,
            6, 70, 172, 176, 119, 44, 78, 15, 182, 253, 115, 91, 175, 96, 138, 82, 133, 74, 73,
            113, 210, 168, 0, 14, 110, 111, 116, 101, 115, 47, 116, 101, 114, 109, 115, 46, 109,
            100, 0, 0, 0, 0, 94, 147, 116, 24, 14, 34, 213, 173, 94, 147, 116, 24, 14, 34, 213,
            173, 1, 0, 0, 4, 1, 21, 71, 22, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 12,
            109, 13, 243, 163, 194, 212, 90, 195, 187, 221, 147, 239, 90, 220, 69, 67, 187, 208,
            134, 156, 10, 0, 14, 115, 114, 99, 47, 102, 115, 47, 102, 97, 107, 101, 46, 114, 115,
            0, 0, 0, 0, 94, 147, 116, 24, 14, 50, 175, 202, 94, 147, 116, 24, 14, 50, 175, 202, 1,
            0, 0, 4, 1, 21, 71, 23, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 3, 219, 208,
            178, 42, 76, 7, 146, 74, 1, 120, 22, 85, 77, 44, 44, 182, 146, 211, 69, 128, 67, 0, 13,
            115, 114, 99, 47, 102, 115, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 0, 0, 94, 147,
            116, 24, 14, 78, 88, 30, 94, 147, 116, 24, 14, 78, 88, 30, 1, 0, 0, 4, 1, 21, 71, 24,
            0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 9, 62, 90, 253, 18, 24, 182, 216, 78,
            95, 151, 80, 81, 220, 25, 18, 193, 130, 173, 239, 182, 78, 0, 14, 115, 114, 99, 47,
            102, 115, 47, 114, 101, 97, 108, 46, 114, 115, 0, 0, 0, 0, 94, 124, 32, 189, 2, 137,
            49, 196, 94, 124, 32, 189, 2, 135, 163, 182, 1, 0, 0, 4, 1, 8, 113, 92, 0, 0, 129, 164,
            0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 0, 34, 165, 133, 59, 29, 162, 218, 108, 53, 180, 38,
            158, 18, 209, 55, 34, 209, 76, 34, 142, 212, 0, 10, 115, 114, 99, 47, 108, 105, 98, 46,
            114, 115, 0, 0, 0, 0, 0, 0, 0, 0, 94, 177, 34, 240, 22, 255, 120, 120, 94, 177, 34,
            240, 22, 254, 86, 47, 1, 0, 0, 4, 1, 41, 141, 175, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0,
            0, 20, 0, 0, 0, 246, 43, 184, 200, 5, 208, 91, 107, 82, 210, 22, 139, 64, 44, 107, 73,
            195, 183, 153, 202, 235, 0, 11, 115, 114, 99, 47, 109, 97, 105, 110, 46, 114, 115, 0,
            0, 0, 0, 0, 0, 0, 94, 167, 139, 6, 59, 139, 54, 221, 94, 167, 139, 6, 59, 139, 54, 221,
            1, 0, 0, 4, 1, 35, 14, 204, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 17, 58,
            177, 88, 100, 254, 156, 13, 114, 33, 178, 146, 3, 14, 37, 209, 115, 142, 213, 4, 204,
            85, 0, 28, 115, 114, 99, 47, 115, 117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115,
            47, 99, 97, 116, 95, 102, 105, 108, 101, 46, 114, 115, 0, 0, 0, 0, 0, 0, 94, 177, 24,
            122, 13, 192, 34, 95, 94, 177, 24, 122, 13, 191, 2, 11, 1, 0, 0, 4, 1, 41, 99, 236, 0,
            0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 13, 149, 210, 45, 151, 69, 45, 168, 142,
            245, 139, 21, 187, 12, 0, 19, 193, 137, 224, 15, 75, 236, 0, 31, 115, 114, 99, 47, 115,
            117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115, 47, 104, 97, 115, 104, 95, 111, 98,
            106, 101, 99, 116, 46, 114, 115, 0, 0, 0, 94, 133, 108, 131, 1, 109, 17, 236, 94, 133,
            108, 131, 1, 109, 17, 236, 1, 0, 0, 4, 1, 12, 55, 255, 0, 0, 129, 164, 0, 0, 1, 245, 0,
            0, 0, 20, 0, 0, 6, 12, 11, 87, 38, 3, 124, 243, 56, 33, 75, 16, 235, 89, 6, 114, 9,
            199, 91, 163, 214, 140, 0, 24, 115, 114, 99, 47, 115, 117, 98, 95, 99, 111, 109, 109,
            97, 110, 100, 115, 47, 105, 110, 105, 116, 46, 114, 115, 0, 0, 94, 179, 137, 220, 37,
            206, 41, 26, 94, 179, 137, 220, 37, 204, 202, 57, 1, 0, 0, 4, 1, 43, 110, 235, 0, 0,
            129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 14, 108, 106, 235, 124, 210, 1, 128, 248,
            226, 58, 31, 83, 243, 219, 200, 99, 175, 55, 189, 200, 14, 0, 28, 115, 114, 99, 47,
            115, 117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115, 47, 108, 115, 95, 102, 105,
            108, 101, 115, 46, 114, 115, 0, 0, 0, 0, 0, 0, 94, 177, 19, 118, 26, 86, 89, 11, 94,
            177, 19, 118, 26, 85, 6, 54, 1, 0, 0, 4, 1, 41, 78, 74, 0, 0, 129, 164, 0, 0, 1, 245,
            0, 0, 0, 20, 0, 0, 5, 149, 154, 29, 159, 105, 4, 126, 153, 28, 5, 25, 182, 117, 41, 25,
            176, 127, 166, 48, 116, 18, 0, 23, 115, 114, 99, 47, 115, 117, 98, 95, 99, 111, 109,
            109, 97, 110, 100, 115, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 84, 82, 69, 69, 0, 0,
            0, 149, 0, 49, 53, 32, 50, 10, 103, 180, 27, 92, 58, 38, 85, 114, 220, 226, 35, 113,
            139, 184, 199, 206, 225, 237, 26, 137, 115, 114, 99, 0, 49, 48, 32, 50, 10, 134, 252,
            110, 171, 250, 244, 65, 96, 75, 213, 174, 196, 239, 25, 179, 84, 40, 46, 101, 27, 102,
            115, 0, 51, 32, 48, 10, 16, 165, 103, 157, 70, 15, 210, 39, 8, 228, 185, 233, 153, 227,
            251, 130, 190, 249, 245, 192, 115, 117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115,
            0, 53, 32, 48, 10, 45, 32, 0, 59, 51, 212, 91, 147, 102, 84, 56, 250, 169, 189, 157,
            194, 36, 201, 201, 76, 110, 111, 116, 101, 115, 0, 49, 32, 48, 10, 92, 152, 245, 148,
            29, 66, 152, 52, 242, 246, 26, 19, 111, 67, 146, 244, 170, 71, 20, 217, 170, 177, 16,
            179, 198, 230, 17, 91, 73, 158, 102, 213, 130, 144, 26, 91, 90, 53, 64, 90,
        ],
    );

    assert_eq!(
        execute(
            &fs,
            false
        )
        .unwrap(),
        ".gitignore\nCargo.lock\nCargo.toml\nREADME.md\nnotes/terms.md\nsrc/fs/fake.rs\nsrc/fs/mod.rs\nsrc/fs/real.rs\nsrc/lib.rs\nsrc/main.rs\nsrc/sub_commands/cat_file.rs\nsrc/sub_commands/hash_object.rs\nsrc/sub_commands/init.rs\nsrc/sub_commands/ls_files.rs\nsrc/sub_commands/mod.rs"
    );
}

#[test]
fn test_execute_good2_no_stage() {
    let mut fs = FileSystem::access();

    fs.create_file(&format!("{}/.papyrus/index", fs.current_directory()));
    fs.write_file(
        &format!("{}/.papyrus/index", fs.current_directory()),
        &[
            68, 73, 82, 67, 0, 0, 0, 2, 0, 0, 0, 3, 94, 179, 116, 133, 12, 81, 1, 169, 94, 179,
            116, 133, 12, 81, 1, 169, 1, 0, 0, 4, 1, 42, 234, 57, 0, 0, 129, 164, 0, 0, 1, 245, 0,
            0, 0, 20, 0, 0, 4, 40, 74, 171, 95, 86, 8, 98, 180, 93, 122, 159, 19, 112, 177, 193,
            99, 183, 68, 132, 162, 77, 0, 11, 76, 73, 67, 69, 78, 83, 69, 46, 116, 120, 116, 0, 0,
            0, 0, 0, 0, 0, 94, 179, 116, 133, 12, 83, 94, 90, 94, 179, 116, 133, 12, 83, 94, 90, 1,
            0, 0, 4, 1, 42, 234, 58, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 1, 89, 67,
            171, 153, 46, 208, 159, 167, 86, 197, 111, 241, 98, 213, 254, 48, 48, 3, 181, 174, 15,
            0, 9, 82, 69, 65, 68, 77, 69, 46, 109, 100, 0, 94, 179, 116, 133, 12, 87, 108, 218, 94,
            179, 116, 133, 12, 87, 108, 218, 1, 0, 0, 4, 1, 42, 234, 59, 0, 0, 129, 164, 0, 0, 1,
            245, 0, 0, 0, 20, 0, 0, 84, 137, 193, 12, 184, 188, 44, 17, 74, 186, 90, 28, 178, 13,
            234, 76, 21, 151, 229, 163, 193, 147, 0, 8, 112, 121, 103, 105, 116, 46, 112, 121, 0,
            0, 84, 82, 69, 69, 0, 0, 0, 25, 0, 51, 32, 48, 10, 34, 38, 78, 192, 206, 157, 162, 157,
            12, 66, 14, 70, 98, 127, 160, 207, 5, 126, 112, 154, 29, 34, 214, 41, 174, 76, 106,
            106, 10, 22, 118, 120, 191, 116, 195, 40, 221, 50, 212, 53,
        ],
    );

    assert_eq!(
        execute(&fs, false).unwrap(),
        "LICENSE.txt\nREADME.md\npygit.py"
    );
}

#[test]
fn test_execute_good1_with_stage() {
    let mut fs = FileSystem::access();

    fs.create_file(&format!("{}/.papyrus/index", fs.current_directory()));
    fs.write_file(
        &format!("{}/.papyrus/index", fs.current_directory()),
        &[
            68, 73, 82, 67, 0, 0, 0, 2, 0, 0, 0, 15, 94, 132, 13, 113, 13, 184, 180, 103, 94, 132,
            13, 113, 13, 183, 115, 50, 1, 0, 0, 4, 1, 12, 85, 214, 0, 0, 129, 164, 0, 0, 1, 245, 0,
            0, 0, 20, 0, 0, 0, 28, 52, 220, 64, 192, 79, 110, 150, 232, 165, 77, 74, 43, 155, 192,
            91, 102, 255, 146, 212, 148, 0, 10, 46, 103, 105, 116, 105, 103, 110, 111, 114, 101, 0,
            0, 0, 0, 0, 0, 0, 0, 94, 177, 34, 250, 5, 252, 82, 81, 94, 177, 34, 250, 5, 252, 82,
            81, 1, 0, 0, 4, 1, 6, 21, 137, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 66,
            212, 23, 32, 220, 206, 3, 11, 166, 54, 145, 202, 239, 206, 148, 207, 142, 114, 189,
            201, 162, 95, 0, 10, 67, 97, 114, 103, 111, 46, 108, 111, 99, 107, 0, 0, 0, 0, 0, 0, 0,
            0, 94, 177, 34, 243, 20, 138, 105, 112, 94, 177, 34, 243, 20, 137, 109, 228, 1, 0, 0,
            4, 1, 41, 141, 186, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 1, 23, 22, 168,
            14, 57, 131, 236, 189, 112, 58, 63, 67, 88, 88, 140, 254, 8, 213, 33, 154, 44, 0, 10,
            67, 97, 114, 103, 111, 46, 116, 111, 109, 108, 0, 0, 0, 0, 0, 0, 0, 0, 94, 120, 31, 1,
            34, 142, 95, 164, 94, 120, 31, 1, 34, 140, 125, 53, 1, 0, 0, 4, 1, 4, 118, 86, 0, 0,
            129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 0, 182, 252, 161, 136, 193, 255, 196, 60,
            248, 188, 144, 96, 52, 26, 55, 133, 58, 119, 249, 109, 44, 0, 9, 82, 69, 65, 68, 77,
            69, 46, 109, 100, 0, 94, 121, 120, 249, 56, 110, 121, 161, 94, 121, 120, 249, 56, 110,
            121, 161, 1, 0, 0, 4, 1, 6, 26, 133, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0,
            6, 70, 172, 176, 119, 44, 78, 15, 182, 253, 115, 91, 175, 96, 138, 82, 133, 74, 73,
            113, 210, 168, 0, 14, 110, 111, 116, 101, 115, 47, 116, 101, 114, 109, 115, 46, 109,
            100, 0, 0, 0, 0, 94, 147, 116, 24, 14, 34, 213, 173, 94, 147, 116, 24, 14, 34, 213,
            173, 1, 0, 0, 4, 1, 21, 71, 22, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 12,
            109, 13, 243, 163, 194, 212, 90, 195, 187, 221, 147, 239, 90, 220, 69, 67, 187, 208,
            134, 156, 10, 0, 14, 115, 114, 99, 47, 102, 115, 47, 102, 97, 107, 101, 46, 114, 115,
            0, 0, 0, 0, 94, 147, 116, 24, 14, 50, 175, 202, 94, 147, 116, 24, 14, 50, 175, 202, 1,
            0, 0, 4, 1, 21, 71, 23, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 3, 219, 208,
            178, 42, 76, 7, 146, 74, 1, 120, 22, 85, 77, 44, 44, 182, 146, 211, 69, 128, 67, 0, 13,
            115, 114, 99, 47, 102, 115, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 0, 0, 94, 147,
            116, 24, 14, 78, 88, 30, 94, 147, 116, 24, 14, 78, 88, 30, 1, 0, 0, 4, 1, 21, 71, 24,
            0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 9, 62, 90, 253, 18, 24, 182, 216, 78,
            95, 151, 80, 81, 220, 25, 18, 193, 130, 173, 239, 182, 78, 0, 14, 115, 114, 99, 47,
            102, 115, 47, 114, 101, 97, 108, 46, 114, 115, 0, 0, 0, 0, 94, 124, 32, 189, 2, 137,
            49, 196, 94, 124, 32, 189, 2, 135, 163, 182, 1, 0, 0, 4, 1, 8, 113, 92, 0, 0, 129, 164,
            0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 0, 34, 165, 133, 59, 29, 162, 218, 108, 53, 180, 38,
            158, 18, 209, 55, 34, 209, 76, 34, 142, 212, 0, 10, 115, 114, 99, 47, 108, 105, 98, 46,
            114, 115, 0, 0, 0, 0, 0, 0, 0, 0, 94, 177, 34, 240, 22, 255, 120, 120, 94, 177, 34,
            240, 22, 254, 86, 47, 1, 0, 0, 4, 1, 41, 141, 175, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0,
            0, 20, 0, 0, 0, 246, 43, 184, 200, 5, 208, 91, 107, 82, 210, 22, 139, 64, 44, 107, 73,
            195, 183, 153, 202, 235, 0, 11, 115, 114, 99, 47, 109, 97, 105, 110, 46, 114, 115, 0,
            0, 0, 0, 0, 0, 0, 94, 167, 139, 6, 59, 139, 54, 221, 94, 167, 139, 6, 59, 139, 54, 221,
            1, 0, 0, 4, 1, 35, 14, 204, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 17, 58,
            177, 88, 100, 254, 156, 13, 114, 33, 178, 146, 3, 14, 37, 209, 115, 142, 213, 4, 204,
            85, 0, 28, 115, 114, 99, 47, 115, 117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115,
            47, 99, 97, 116, 95, 102, 105, 108, 101, 46, 114, 115, 0, 0, 0, 0, 0, 0, 94, 177, 24,
            122, 13, 192, 34, 95, 94, 177, 24, 122, 13, 191, 2, 11, 1, 0, 0, 4, 1, 41, 99, 236, 0,
            0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 13, 149, 210, 45, 151, 69, 45, 168, 142,
            245, 139, 21, 187, 12, 0, 19, 193, 137, 224, 15, 75, 236, 0, 31, 115, 114, 99, 47, 115,
            117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115, 47, 104, 97, 115, 104, 95, 111, 98,
            106, 101, 99, 116, 46, 114, 115, 0, 0, 0, 94, 133, 108, 131, 1, 109, 17, 236, 94, 133,
            108, 131, 1, 109, 17, 236, 1, 0, 0, 4, 1, 12, 55, 255, 0, 0, 129, 164, 0, 0, 1, 245, 0,
            0, 0, 20, 0, 0, 6, 12, 11, 87, 38, 3, 124, 243, 56, 33, 75, 16, 235, 89, 6, 114, 9,
            199, 91, 163, 214, 140, 0, 24, 115, 114, 99, 47, 115, 117, 98, 95, 99, 111, 109, 109,
            97, 110, 100, 115, 47, 105, 110, 105, 116, 46, 114, 115, 0, 0, 94, 179, 137, 220, 37,
            206, 41, 26, 94, 179, 137, 220, 37, 204, 202, 57, 1, 0, 0, 4, 1, 43, 110, 235, 0, 0,
            129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 14, 108, 106, 235, 124, 210, 1, 128, 248,
            226, 58, 31, 83, 243, 219, 200, 99, 175, 55, 189, 200, 14, 0, 28, 115, 114, 99, 47,
            115, 117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115, 47, 108, 115, 95, 102, 105,
            108, 101, 115, 46, 114, 115, 0, 0, 0, 0, 0, 0, 94, 177, 19, 118, 26, 86, 89, 11, 94,
            177, 19, 118, 26, 85, 6, 54, 1, 0, 0, 4, 1, 41, 78, 74, 0, 0, 129, 164, 0, 0, 1, 245,
            0, 0, 0, 20, 0, 0, 5, 149, 154, 29, 159, 105, 4, 126, 153, 28, 5, 25, 182, 117, 41, 25,
            176, 127, 166, 48, 116, 18, 0, 23, 115, 114, 99, 47, 115, 117, 98, 95, 99, 111, 109,
            109, 97, 110, 100, 115, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 84, 82, 69, 69, 0, 0,
            0, 149, 0, 49, 53, 32, 50, 10, 103, 180, 27, 92, 58, 38, 85, 114, 220, 226, 35, 113,
            139, 184, 199, 206, 225, 237, 26, 137, 115, 114, 99, 0, 49, 48, 32, 50, 10, 134, 252,
            110, 171, 250, 244, 65, 96, 75, 213, 174, 196, 239, 25, 179, 84, 40, 46, 101, 27, 102,
            115, 0, 51, 32, 48, 10, 16, 165, 103, 157, 70, 15, 210, 39, 8, 228, 185, 233, 153, 227,
            251, 130, 190, 249, 245, 192, 115, 117, 98, 95, 99, 111, 109, 109, 97, 110, 100, 115,
            0, 53, 32, 48, 10, 45, 32, 0, 59, 51, 212, 91, 147, 102, 84, 56, 250, 169, 189, 157,
            194, 36, 201, 201, 76, 110, 111, 116, 101, 115, 0, 49, 32, 48, 10, 92, 152, 245, 148,
            29, 66, 152, 52, 242, 246, 26, 19, 111, 67, 146, 244, 170, 71, 20, 217, 170, 177, 16,
            179, 198, 230, 17, 91, 73, 158, 102, 213, 130, 144, 26, 91, 90, 53, 64, 90,
        ],
    );

    assert_eq!(
        execute(
            &fs,
            true
        )
        .unwrap(),
        "100644 34dc40c04f6e96e8a54d4a2b9bc05b66ff92d494 0\t.gitignore\n100644 1720dcce030ba63691caefce94cf8e72bdc9a25f 0\tCargo.lock\n100644 16a80e3983ecbd703a3f4358588cfe08d5219a2c 0\tCargo.toml\n100644 fca188c1ffc43cf8bc9060341a37853a77f96d2c 0\tREADME.md\n100644 acb0772c4e0fb6fd735baf608a52854a4971d2a8 0\tnotes/terms.md\n100644 0df3a3c2d45ac3bbdd93ef5adc4543bbd0869c0a 0\tsrc/fs/fake.rs\n100644 d0b22a4c07924a017816554d2c2cb692d3458043 0\tsrc/fs/mod.rs\n100644 5afd1218b6d84e5f975051dc1912c182adefb64e 0\tsrc/fs/real.rs\n100644 a5853b1da2da6c35b4269e12d13722d14c228ed4 0\tsrc/lib.rs\n100644 2bb8c805d05b6b52d2168b402c6b49c3b799caeb 0\tsrc/main.rs\n100644 b15864fe9c0d7221b292030e25d1738ed504cc55 0\tsrc/sub_commands/cat_file.rs\n100644 d22d97452da88ef58b15bb0c0013c189e00f4bec 0\tsrc/sub_commands/hash_object.rs\n100644 0b5726037cf338214b10eb59067209c75ba3d68c 0\tsrc/sub_commands/init.rs\n100644 6aeb7cd20180f8e23a1f53f3dbc863af37bdc80e 0\tsrc/sub_commands/ls_files.rs\n100644 9a1d9f69047e991c0519b6752919b07fa6307412 0\tsrc/sub_commands/mod.rs"
    );
}

#[test]
fn test_execute_good2_with_stage() {
    let mut fs = FileSystem::access();

    fs.create_file(&format!("{}/.papyrus/index", fs.current_directory()));
    fs.write_file(
        &format!("{}/.papyrus/index", fs.current_directory()),
        &[
            68, 73, 82, 67, 0, 0, 0, 2, 0, 0, 0, 3, 94, 179, 116, 133, 12, 81, 1, 169, 94, 179,
            116, 133, 12, 81, 1, 169, 1, 0, 0, 4, 1, 42, 234, 57, 0, 0, 129, 164, 0, 0, 1, 245, 0,
            0, 0, 20, 0, 0, 4, 40, 74, 171, 95, 86, 8, 98, 180, 93, 122, 159, 19, 112, 177, 193,
            99, 183, 68, 132, 162, 77, 0, 11, 76, 73, 67, 69, 78, 83, 69, 46, 116, 120, 116, 0, 0,
            0, 0, 0, 0, 0, 94, 179, 116, 133, 12, 83, 94, 90, 94, 179, 116, 133, 12, 83, 94, 90, 1,
            0, 0, 4, 1, 42, 234, 58, 0, 0, 129, 164, 0, 0, 1, 245, 0, 0, 0, 20, 0, 0, 1, 89, 67,
            171, 153, 46, 208, 159, 167, 86, 197, 111, 241, 98, 213, 254, 48, 48, 3, 181, 174, 15,
            0, 9, 82, 69, 65, 68, 77, 69, 46, 109, 100, 0, 94, 179, 116, 133, 12, 87, 108, 218, 94,
            179, 116, 133, 12, 87, 108, 218, 1, 0, 0, 4, 1, 42, 234, 59, 0, 0, 129, 164, 0, 0, 1,
            245, 0, 0, 0, 20, 0, 0, 84, 137, 193, 12, 184, 188, 44, 17, 74, 186, 90, 28, 178, 13,
            234, 76, 21, 151, 229, 163, 193, 147, 0, 8, 112, 121, 103, 105, 116, 46, 112, 121, 0,
            0, 84, 82, 69, 69, 0, 0, 0, 25, 0, 51, 32, 48, 10, 34, 38, 78, 192, 206, 157, 162, 157,
            12, 66, 14, 70, 98, 127, 160, 207, 5, 126, 112, 154, 29, 34, 214, 41, 174, 76, 106,
            106, 10, 22, 118, 120, 191, 116, 195, 40, 221, 50, 212, 53,
        ],
    );

    assert_eq!(
        execute(
            &fs,
            true
        )
        .unwrap(),
        "100644 4aab5f560862b45d7a9f1370b1c163b74484a24d 0\tLICENSE.txt\n100644 43ab992ed09fa756c56ff162d5fe303003b5ae0f 0\tREADME.md\n100644 c10cb8bc2c114aba5a1cb20dea4c1597e5a3c193 0\tpygit.py"
    );
}
